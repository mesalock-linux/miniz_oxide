diff --git a/miniz_oxide/src/deflate/core.rs b/miniz_oxide/src/deflate/core.rs
index a6ef0df..b76e835 100644
--- a/miniz_oxide/src/deflate/core.rs
+++ b/miniz_oxide/src/deflate/core.rs
@@ -278,7 +278,7 @@ const MIN_MATCH_LEN: u32 = 3;
 /// The maximum length of a match.
 pub(crate) const MAX_MATCH_LEN: usize = 258;
 
-const DEFAULT_FLAGS: u32 = NUM_PROBES[4] | TDEFL_WRITE_ZLIB_HEADER;
+pub const DEFAULT_FLAGS: u32 = NUM_PROBES[4] | TDEFL_WRITE_ZLIB_HEADER;
 
 fn memset<T: Copy>(slice: &mut [T], val: T) {
     for x in slice {
@@ -286,16 +286,16 @@ fn memset<T: Copy>(slice: &mut [T], val: T) {
     }
 }
 
-#[cfg(test)]
+//#[cfg(test)]
 #[inline]
-fn write_u16_le(val: u16, slice: &mut [u8], pos: usize) {
+pub fn write_u16_le(val: u16, slice: &mut [u8], pos: usize) {
     slice[pos] = val as u8;
     slice[pos + 1] = (val >> 8) as u8;
 }
 
 // Read the two bytes starting at pos and interpret them as an u16.
 #[inline]
-fn read_u16_le(slice: &[u8], pos: usize) -> u16 {
+pub fn read_u16_le(slice: &[u8], pos: usize) -> u16 {
     // The compiler is smart enough to optimize this into an unaligned load.
     slice[pos] as u16 | ((slice[pos + 1] as u16) << 8)
 }
@@ -616,7 +616,7 @@ struct SavedOutputBufferOxide {
     pub local: bool,
 }
 
-struct BitBuffer {
+pub struct BitBuffer {
     pub bit_buffer: u64,
     pub bits_in: u32,
 }
diff --git a/miniz_oxide/src/deflate/mod.rs b/miniz_oxide/src/deflate/mod.rs
index 218515b..e5a1e78 100644
--- a/miniz_oxide/src/deflate/mod.rs
+++ b/miniz_oxide/src/deflate/mod.rs
@@ -117,7 +117,7 @@ pub fn compress_to_vec_zlib(input: &[u8], level: u8) -> Vec<u8> {
 }
 
 /// Simple function to compress data to a vec.
-fn compress_to_vec_inner(input: &[u8], level: u8, window_bits: i32, strategy: i32) -> Vec<u8> {
+pub fn compress_to_vec_inner(input: &[u8], level: u8, window_bits: i32, strategy: i32) -> Vec<u8> {
     // The comp flags function sets the zlib flag if the window_bits parameter is > 0.
     let flags = create_comp_flags_from_zip_params(level.into(), window_bits, strategy);
     let mut compressor = CompressorOxide::new(flags);
diff --git a/miniz_oxide/src/inflate/core.rs b/miniz_oxide/src/inflate/core.rs
index e8f6b2a..d7ea2fa 100644
--- a/miniz_oxide/src/inflate/core.rs
+++ b/miniz_oxide/src/inflate/core.rs
@@ -11,7 +11,7 @@ use self::output_buffer::OutputBuffer;
 pub const TINFL_LZ_DICT_SIZE: usize = 32_768;
 
 /// A struct containing huffman code lengths and the huffman code tree used by the decompressor.
-struct HuffmanTable {
+pub struct HuffmanTable {
     /// Length of the code at each index.
     pub code_size: [u8; MAX_HUFF_SYMBOLS_0],
     /// Fast lookup table for shorter huffman codes.
@@ -26,7 +26,7 @@ struct HuffmanTable {
 }
 
 impl HuffmanTable {
-    fn new() -> HuffmanTable {
+    pub fn new() -> HuffmanTable {
         HuffmanTable {
             code_size: [0; MAX_HUFF_SYMBOLS_0],
             look_up: [0; FAST_LOOKUP_SIZE as usize],
@@ -39,13 +39,13 @@ impl HuffmanTable {
     /// If the returned value is negative, the code wasn't found in the
     /// fast lookup table and the full tree has to be traversed to find the code.
     #[inline]
-    fn fast_lookup(&self, bit_buf: BitBuffer) -> i16 {
+    pub fn fast_lookup(&self, bit_buf: BitBuffer) -> i16 {
         self.look_up[(bit_buf & BitBuffer::from(FAST_LOOKUP_SIZE - 1)) as usize]
     }
 
     /// Get the symbol and the code length from the huffman tree.
     #[inline]
-    fn tree_lookup(&self, fast_symbol: i32, bit_buf: BitBuffer, mut code_len: u32) -> (i32, u32) {
+    pub fn tree_lookup(&self, fast_symbol: i32, bit_buf: BitBuffer, mut code_len: u32) -> (i32, u32) {
         let mut symbol = fast_symbol;
         // We step through the tree until we encounter a positive value, which indicates a
         // symbol.
@@ -69,7 +69,7 @@ impl HuffmanTable {
     ///
     /// It's possible we could avoid checking for 0 if we can guarantee a sane table.
     /// TODO: Check if a smaller type for code_len helps performance.
-    fn lookup(&self, bit_buf: BitBuffer) -> Option<(i32, u32)> {
+    pub fn lookup(&self, bit_buf: BitBuffer) -> Option<(i32, u32)> {
         let symbol = self.fast_lookup(bit_buf).into();
         if symbol >= 0 {
             if (symbol >> 9) as u32 != 0 {
@@ -98,8 +98,8 @@ const FAST_LOOKUP_BITS: u8 = 10;
 /// The size of the fast lookup table.
 const FAST_LOOKUP_SIZE: u32 = 1 << FAST_LOOKUP_BITS;
 const MAX_HUFF_TREE_SIZE: usize = MAX_HUFF_SYMBOLS_0 * 2;
-const LITLEN_TABLE: usize = 0;
-const DIST_TABLE: usize = 1;
+pub const LITLEN_TABLE: usize = 0;
+pub const DIST_TABLE: usize = 1;
 const HUFFLEN_TABLE: usize = 2;
 
 pub mod inflate_flags {
@@ -118,46 +118,46 @@ use self::inflate_flags::*;
 const MIN_TABLE_SIZES: [u16; 3] = [257, 1, 4];
 
 #[cfg(target_pointer_width = "64")]
-type BitBuffer = u64;
+pub type BitBuffer = u64;
 
 #[cfg(not(target_pointer_width = "64"))]
-type BitBuffer = u32;
+pub type BitBuffer = u32;
 
 /// Main decompression struct.
 ///
 pub struct DecompressorOxide {
     /// Current state of the decompressor.
-    state: core::State,
+    pub state: core::State,
     /// Number of bits in the bit buffer.
-    num_bits: u32,
+    pub num_bits: u32,
     /// Zlib CMF
-    z_header0: u32,
+    pub z_header0: u32,
     /// Zlib FLG
-    z_header1: u32,
+    pub z_header1: u32,
     /// Adler32 checksum from the zlib header.
-    z_adler32: u32,
+    pub z_adler32: u32,
     /// 1 if the current block is the last block, 0 otherwise.
-    finish: u32,
+    pub finish: u32,
     /// The type of the current block.
-    block_type: u32,
+    pub block_type: u32,
     /// 1 if the adler32 value should be checked.
-    check_adler32: u32,
+    pub check_adler32: u32,
     /// Last match distance.
-    dist: u32,
+    pub dist: u32,
     /// Variable used for match length, symbols, and a number of other things.
-    counter: u32,
+    pub counter: u32,
     /// Number of extra bits for the last length or distance code.
-    num_extra: u32,
+    pub num_extra: u32,
     /// Number of entries in each huffman table.
-    table_sizes: [u32; MAX_HUFF_TABLES],
+    pub table_sizes: [u32; MAX_HUFF_TABLES],
     /// Buffer of input data.
-    bit_buf: BitBuffer,
+    pub bit_buf: BitBuffer,
     /// Huffman tables.
-    tables: [HuffmanTable; MAX_HUFF_TABLES],
+    pub tables: [HuffmanTable; MAX_HUFF_TABLES],
     /// Raw block header.
-    raw_header: [u8; 4],
+    pub raw_header: [u8; 4],
     /// Huffman length codes.
-    len_codes: [u8; MAX_HUFF_SYMBOLS_0 + MAX_HUFF_SYMBOLS_1 + 137],
+    pub len_codes: [u8; MAX_HUFF_SYMBOLS_0 + MAX_HUFF_SYMBOLS_1 + 137],
 }
 
 impl DecompressorOxide {
@@ -215,7 +215,7 @@ impl Default for DecompressorOxide {
 }
 
 #[derive(Copy, Clone, PartialEq, Eq, Debug)]
-enum State {
+pub enum State {
     Start = 0,
     ReadZlibCmf,
     ReadZlibFlg,
@@ -416,7 +416,7 @@ fn validate_zlib_header(cmf: u32, flg: u32, flags: u32, mask: usize) -> Action {
     }
 }
 
-enum Action {
+pub enum Action {
     None,
     Jump(State),
     End(TINFLStatus),
@@ -613,7 +613,7 @@ fn undo_bytes(l: &mut LocalVars, max: u32) -> u32 {
     res
 }
 
-fn start_static_table(r: &mut DecompressorOxide) {
+pub fn start_static_table(r: &mut DecompressorOxide) {
     r.table_sizes[LITLEN_TABLE] = 288;
     r.table_sizes[DIST_TABLE] = 32;
     memset(&mut r.tables[LITLEN_TABLE].code_size[0..144], 8);
@@ -623,7 +623,7 @@ fn start_static_table(r: &mut DecompressorOxide) {
     memset(&mut r.tables[DIST_TABLE].code_size[0..32], 5);
 }
 
-fn init_tree(r: &mut DecompressorOxide, l: &mut LocalVars) -> Action {
+pub fn init_tree(r: &mut DecompressorOxide, l: &mut LocalVars) -> Action {
     loop {
         let table = &mut r.tables[r.block_type as usize];
         let table_size = r.table_sizes[r.block_type as usize] as usize;
@@ -734,7 +734,7 @@ macro_rules! generate_state {
 }
 
 #[derive(Copy, Clone)]
-struct LocalVars {
+pub struct LocalVars {
     pub bit_buf: BitBuffer,
     pub num_bits: u32,
     pub dist: u32,
diff --git a/miniz_oxide/src/lib.rs b/miniz_oxide/src/lib.rs
index b844e16..e875424 100644
--- a/miniz_oxide/src/lib.rs
+++ b/miniz_oxide/src/lib.rs
@@ -34,7 +34,7 @@ extern crate adler32;
 
 pub mod deflate;
 pub mod inflate;
-mod shared;
+pub mod shared;
 
 pub use crate::shared::update_adler32 as mz_adler32_oxide;
 pub use crate::shared::{MZ_ADLER32_INIT, MZ_DEFAULT_WINDOW_BITS};
